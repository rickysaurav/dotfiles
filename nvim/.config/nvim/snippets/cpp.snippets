# A valid snippet should starts with:
#
#       snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#       endsnippet
#
# Snippet options:
#
#       b - Beginning of line.
#       i - In-word expansion.
#       w - Word boundary.
#       r - Regular expression
#       e - Custom context snippet
#       A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#       snippet emitter "emitter properties" b
#       private readonly ${1} = new Emitter<$2>()
#       public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#       endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet case "case" b
cout<<"Case #"<<tt<<": "<<${1:ans}<<NL;${0}
endsnippet

snippet norm "cp template" b
#include<bits/stdc++.h>
using namespace std;
typedef long long ll
typedef pair<ll,ll> pll;
#define fillm(a,val) memset(a,val,sizeof(a))
#define NL "\n"
const ll mod = 1000000007;
const ll maxn = ${1:100005};
const ll inf = 1ll<<50;
int main()
{
#ifdef LOCAL_SYS
    freopen("input.txt","r",stdin);
#endif
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    ${0}
    return 0;
}
endsnippet

snippet outp "files" b
#ifdef LOCAL_SYS
    freopen("input.txt","r",stdin);
#endif
endsnippet

snippet powm "modpow" b
ll powmod(ll base, ll exp,ll mod)
{
    ll res = 1;
    while(exp)
    {
        if(exp&1)
            res = (res*base)%mod;
        base = (base*base)%mod;
        exp>>=1;
    }
    return res;
}
${0}
endsnippet

snippet phak "phak" b
cout<<"phak"<<endl;
endsnippet
