* Emacs Configuration
  *Minimum Requirements - Emacs 26*
  This is an Emacs configuration file written in Org mode. It is an attempt to
  keep my ~/.emacs.d tidy, but still be able to keep it allin one file. I aim to
  briefly explain all my configurations as I go along! I would not recommend using
  this configuration as-is, because it probably contains a lot you donâ€™t really
  need. I do, however, hope people find some golden nuggets that they can smuggle
  into their own configs.
* Package Installation setup
** Bootstrap
*** Install straight.el
    #+BEGIN_SRC emacs-lisp
      (setq straight-repository-branch "develop")
      (defvar bootstrap-version)
      (let ((bootstrap-file
             (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
            (bootstrap-version 5))
        (unless (file-exists-p bootstrap-file)
          (with-current-buffer
              (url-retrieve-synchronously
               "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
               'silent 'inhibit-cookies)
            (goto-char (point-max))
            (eval-print-last-sexp)))
        (load bootstrap-file nil 'nomessage))
    #+END_SRC
*** Install use-package
    #+BEGIN_SRC emacs-lisp
       (straight-use-package 'use-package)
       (setq use-package-verbose t)
    #+END_SRC
** Pre-evaluate all autoloads
   Pre evaluate evaluate all cached autoloads
   #+BEGIN_SRC emacs-lisp
  (maphash (lambda (package value)
             (add-to-list 'load-path (directory-file-name
                                      (straight--build-dir package)))
             (let ((load-file-name (straight--autoloads-file package)))
               (dolist (form (cdr value))
                 (eval form))) ) straight--autoloads-cache)
   #+END_SRC
** Exec-path-from shell
   Makes emacs path coherent with shell path
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :if (or (daemonp) (memq window-system '(mac ns x)))
       :straight t
       :defer 1
       :init
       (setq exec-path-from-shell-arguments '("-l"))
       :config
       (exec-path-from-shell-initialize))
   #+END_SRC
* Personal Config Tweaks
** Line-numbers
   #+BEGIN_SRC emacs-lisp
      (setq-default display-line-numbers 'relative)
   #+END_SRC
** Fringe
   #+begin_src emacs-lisp
     ;;adding hook due to daemon mode
     (add-hook 'after-init-hook (lambda () (set-fringe-mode 0)))
   #+end_src
** Autosave and Backups
   Save to existing file name(no swapfiles or backups),lower character inputs
   and idle time limits before autosave.
   #+BEGIN_SRC emacs-lisp
      (setq auto-save-visited-file-name t
            ;; auto-save-interval 100
            ;; auto-save-timeout 30
            make-backup-files nil)
   #+END_SRC
** Misc
   #+BEGIN_SRC emacs-lisp
     (setq vc-follow-symlinks nil
           ring-bell-function 'ignore
           inhibit-startup-screen t)
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Some interface tweaks
   #+BEGIN_SRC emacs-lisp
      (add-hook 'after-init-hook (lambda ()
                                           (display-battery-mode t)
                                           (display-time-mode t)
                                           (menu-bar-mode -1)
                                           (scroll-bar-mode -1)
                                           (tool-bar-mode -1)))
   #+END_SRC
** Save locations on buffers
   #+BEGIN_SRC emacs-lisp
    (save-place-mode t)
   #+END_SRC
** Set UTF-8 encoding
   #+BEGIN_SRC emacs-lisp
    (setq locale-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
   #+END_SRC
** Font settings
   #+BEGIN_SRC emacs-lisp
      (setq default-frame-alist '((font . "Iosevka Nerd Font-16")))
   #+END_SRC
** Indentation settings
   #+BEGIN_SRC emacs-lisp
     (setq-default tab-width 4
                   fill-column 80)
     (setq-default indent-tabs-mode nil)
   #+END_SRC
** C-indentation
   #+BEGIN_SRC emacs-lisp
      (setq c-default-style "bsd"
            c-basic-offset 4
            c-hungry-delete-key t)
   #+END_SRC
** Paranoid Auto-saving methods :p
*** Autosave on emacs frame(application) focus lost
    #+BEGIN_SRC emacs-lisp
    (add-hook 'focus-out-hook (lambda()(save-some-buffers t)))
    #+END_SRC
*** Autosave on window or buffer switch
    #+BEGIN_SRC emacs-lisp
      (defadvice switch-to-buffer (before save-buffer-now activate)
        (when buffer-file-name (save-buffer)))
      (defadvice other-window (before other-window-now activate)
        (when buffer-file-name (save-buffer)))
      (defadvice windmove-up (before other-window-now activate)
        (when buffer-file-name (save-buffer)))
      (defadvice windmove-down (before other-window-now activate)
        (when buffer-file-name (save-buffer)))
      (defadvice windmove-left (before other-window-now activate)
        (when buffer-file-name (save-buffer)))
      (defadvice windmove-right (before other-window-now activate)
        (when buffer-file-name (save-buffer)))
    #+END_SRC
** Edit & Reload config.org
   #+BEGIN_SRC emacs-lisp
     (defun config-visit ()
       "visit emacs config file"
       (interactive)
       (find-file "~/.emacs.d/config.org"))
    (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
   #+END_SRC
* Keybinding management
** General
   Keybinding on steroids
*** Config
    A lot of packages depend on this package.Load this first.
    #+BEGIN_SRC emacs-lisp
      (use-package general
        :straight t
        :demand t
        :config
        (general-evil-setup))
    #+END_SRC
** Hydra
    Transient keymaps library.
    #+BEGIN_SRC emacs-lisp
      (use-package hydra
        :init
        (if (display-graphic-p)(setq  hydra-hint-display-type 'posframe) )
        :straight t
        :defer t)
    #+END_SRC

** Which-key
   Display available keybindings in a popup
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
         :straight t
         :demand t
         :diminish which-key-mode
         :config
         (which-key-mode 1))
   #+END_SRC
* Evil Setup
** Evil-mode
   Vim bindings for emacs
*** Config
    1. minibuffer-keyboard-quit to quit all minibuffers
    2. Map [escape] to quit all minibuffers
       #+BEGIN_SRC emacs-lisp
         (use-package evil
           :after general
           :straight t
           :demand t
           :init
           (defun minibuffer-keyboard-quit ()
             "Abort recursive edit.
         In Delete Selection mode, if the mark is active, just deactivate it;
         then it takes a second \\[keyboard-quit] to abort the minibuffer."
             (interactive)
             (if (and delete-selection-mode transient-mark-mode mark-active)
                 (setq deactivate-mark  t)
               (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
               (abort-recursive-edit)))
           :general
           (:states '(insert)
            "C-n" nil
            "C-p" nil)
           :init
           (setq evil-want-C-u-scroll t)
           (setq evil-disable-insert-state-bindings t)
           (setq evil-want-C-i-jump nil)
           :config
           (evil-mode 1)
           (define-key evil-normal-state-map [escape] 'keyboard-quit)
           (define-key evil-motion-state-map [escape] 'keyboard-quit)
           (define-key evil-visual-state-map [escape] 'keyboard-quit)
           (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
           (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
           (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
           (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
           (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit))
       #+END_SRC
** Unbind Space
   Unbind Space in evil-states to use it as prefix
   #+BEGIN_SRC emacs-lisp
      (general-unbind '(normal motion operator visual)
        "SPC")
      (general-unbind '(compilation-mode-map)
        "SPC"
        "C-d")
     (general-unbind '(comint-mode-map)
        "SPC"
        "C-d")
     (general-unbind 'dired-mode-map
       "SPC")
      (general-unbind 'motion 'Info-mode-map "SPC")
      (general-unbind 'Info-mode-map "SPC")
      (general-def '(motion normal) 'Info-mode-map "<escape>" 'keyboard-escape-quit)
   #+END_SRC
** Evil-surround
   Vim surround on emacs
   #+BEGIN_SRC emacs-lisp
      (use-package evil-surround
        :straight t
        :defer t
        :after evil
        :ghook
        ('prog-mode-hook #'evil-surround-mode 1))
   #+END_SRC
** Evil-nerd-commenter
   Vim nerd-commenter for emacs
   #+BEGIN_SRC emacs-lisp
      (use-package evil-nerd-commenter
        :straight t
        :general
        (
         :states '(normal motion insert emacs)
         :prefix "SPC c"
         :non-normal-prefix "M-SPC c"
         :prefix-map 'ricky//comment/compile-prefix-map
         "" '(:ignore t :which-key "comment/compile-prefix")
         "i" 'evilnc-comment-or-uncomment-lines
         "l" 'evilnc-quick-comment-or-uncomment-to-the-line
         "c" 'evilnc-copy-and-comment-lines
         "p" 'evilnc-comment-or-uncomment-paragraphs
         "r" 'comment-or-uncomment-region
         "v" 'evilnc-toggle-invert-comment-line-by-line
         "."  'evilnc-copy-and-comment-operator
         "\\" 'evilnc-comment-operator ; if you prefer backslash key
         ))
   #+END_SRC
** Avy
   Vim-easymotion alternative for emacs
*** Config
    1. map <return> to avy-isearch,for vim-easymotion n-char search(does not work well with evil-search).
    2. bind <SPC-/> to got-char as work-around for previous.(unbind SPC befor binding <SPC-/>)
       #+BEGIN_SRC emacs-lisp
       (use-package avy
         :straight t
         :demand t
         :init
         (setq avy-all-windows nil)
         (defvar ricky//avy-isearch-point nil "value for storing last avy-isearch point ")
         ;; (make-variable-buffer-local ricky//avy-isearch-point)
         (defun ricky//avy-isearch ()
           "Jump to one of the current isearch candidates."
           (interactive)
           (avy-with avy-isearch
             (let ((avy-background nil))
               (avy--process
                (avy--regex-candidates (if isearch-regexp
                                           isearch-string
                                         (regexp-quote isearch-string)))
                (avy--style-fn avy-style))
               (setq ricky//avy-isearch-point (point))
               (isearch-done))))
         (defun ricky//evil-forward-search-avy-advice (old-fun &rest args)
           "integrate avy-isearch with evil forward search"
           (interactive)
           (setq ricky//avy-isearch-point (point))
           (apply old-fun args)
           (when (and (boundp 'ricky//avy-isearch-point) ricky//avy-isearch-point)
             (goto-char ricky//avy-isearch-point)
             (setq ricky//avy-isearch-point nil)))
         :general
         (:keymaps 'isearch-mode-map
                   "<return>" 'ricky//avy-isearch)
         :config
         (avy-setup-default)
         (general-add-advice 'evil-search-forward :around #'ricky//evil-forward-search-avy-advice)
         )
       #+END_SRC
** Evil-Easymotion
   Vim-easymotion emacs bindings
*** Config
    Two different prefixes for easymotion commands "," and "SPC m".
    #+BEGIN_SRC emacs-lisp
       (use-package evil-easymotion
         :straight t
         :defer t
         :general
         (:states '(normal motion insert emacs)
                   :prefix "SPC m"
                   :non-normal-prefix "M-SPC m"
                   "" '(:keymap evilem-map :package evil-easymotion :which-key "easy-motion prefix"))
         (:states '(normal motion insert emacs)
                   :prefix ","
                   :non-normal-prefix "M-,"
                   "" '(:keymap evilem-map :package evil-easymotion :which-key "easy-motion prefix"))
         :config
         (evilem-default-keybindings "SPC m"))
    #+END_SRC
* ORG
** ORG
#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight t
    :init
    (setq org-agenda-files '("~/pCloudDrive/org/agenda"))
    :ghook
    ('org-mode-hook 'auto-fill-mode)
    )
#+END_SRC
** Reveal.js
   #+BEGIN_SRC emacs-lisp
      (use-package ox-reveal
        :straight t
        :defer t)
   #+END_SRC
* UI
** Spacemacs-theme
   #+BEGIN_SRC emacs-lisp
       (use-package spacemacs-theme
         :straight t
         :no-require t
         :init
         (defun ricky//load-spacemacs-theme (frame)
           (select-frame frame)
           (load-theme 'spacemacs-dark t)
           (remove-hook 'after-make-frame-functions #'ricky//load-spacemacs-theme))
       (if (daemonp)
           (add-hook 'after-make-frame-functions #'ricky//load-spacemacs-theme)
         (load-theme 'spacemacs-dark t)))
       ;;   :config
       ;; (if (daemonp)
       ;;   (add-hook 'after-make-frame-functions #'ricky//load-spacemacs-theme)
       ;;   (load-theme 'spacemacs-dark t)))
         ;; (load-theme 'spacemacs-dark t))
   #+END_SRC
** Telephone-line
   Modern mode-line for emacs
*** Config
    1. Set lhs,lhs-center,rhs-center,rhs segments
    2. Set the separator values
    3. Set line height
    4. Short values for evil-state
       #+BEGIN_SRC emacs-lisp
         (use-package telephone-line
         :straight t
         :ghook
         ('after-init-hook #'telephone-line-mode)
         :init
         (setq telephone-line-lhs
         '((evil   . (telephone-line-evil-tag-segment))
             (accent . (telephone-line-vc-segment telephone-line-process-segment telephone-line-projectile-segment))
             (nil    . (telephone-line-minor-mode-segment))))
         (setq telephone-line-center-lhs
             '((nil .())
             (evil   . (telephone-line-buffer-segment))))
         (setq telephone-line-center-rhs
             '((evil   . (telephone-line-major-mode-segment))
             (nil .())))
         (setq telephone-line-rhs
         '((nil    . (telephone-line-flycheck-segment))
         (accent . (telephone-line-misc-info-segment))
             (evil   . (telephone-line-airline-position-segment))))
         (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
             telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
             telephone-line-primary-right-separator 'telephone-line-cubed-right
             telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
         (setq telephone-line-height 24
             telephone-line-evil-use-short-tag t)
             )
       #+END_SRC
** Doom-modeline
   #+BEGIN_SRC emacs-lisp
     ;; (use-p
     ;;   :straight t
     ;;   :init (doom-modeline-mode 1))
   #+END_SRC
** Dashboard
   Vim startify attempt for emacs
   #+BEGIN_SRC emacs-lisp
            (use-package dashboard
            :straight t
            :config
            (dashboard-setup-startup-hook)
            :init
            (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
   #+END_SRC
** Helm
   Interface autocompletion for emacs
*** Config
    Enable fuzzy matching wherever possible
    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :straight t
        :demand t
        :general
        ("M-x" 'helm-M-x
         "C-x C-f" 'helm-find-files)
        (:states '(normal motion insert emacs)
         :prefix "SPC h"
         :non-normal-prefix "M-SPC h"
         :prefix-map 'ricky//helm-prefix-map
         "" '(:ignore t :which-key "helm-prefix")
         "h" 'helm-apropos
         "i" 'helm-imenu
         "k" 'helm-show-kill-ring)
        :init
        (setq helm-semantic-fuzzy-match t
              helm-imenu-fuzzy-match    t
              helm-locate-fuzzy-match t
              helm-apropos-fuzzy-match t
              helm-M-x-fuzzy-match t
              helm-buffers-fuzzy-matching t
              helm-recentf-fuzzy-match    t
              helm-mode-fuzzy-match t
              helm-completion-in-region-fuzzy-match t
              helm-window-prefer-horizontal-split 'decide)
        :diminish helm-mode
        :config
        (add-to-list 'completion-styles (if (version<= emacs-version "27.0") 'helm-flex 'flex))
        (helm-mode 1))
    #+END_SRC
** Helm-swoop
   Buffer Search utility using helm
   #+BEGIN_SRC emacs-lisp
     (use-package helm-swoop
       :straight t
       :after helm
       :defer t
       :general
       (
        :keymaps  '(helm-swoop-map)
        "M-i" 'helm-multi-swoop-all-from-helm-swoop
        "M-m" 'helm-multi-swoop-current-mode-from-helm-swoop)
       (:keymaps 'ricky//search-prefix-map
         "s" 'helm-swoop
         "m" 'helm-multi-swoop-all
         "c" 'helm-multi-swoop-current-mode))
   #+END_SRC
** Diminish
   Reduce modeline clutter by diminishing minor modes
   #+BEGIN_SRC emacs-lisp
     (use-package diminish
       :straight t
       :commands diminish
       :init
       (diminish 'auto-revert-mode)
       (diminish 'undo-tree-mode)
       (diminish 'abbrev-mode)
       (diminish 'rainbow-mode)
       (diminish 'eldoc-mode)
       (diminish 'auto-fill-mode))
   #+END_SRC
** Hide-mode-line
   #+BEGIN_SRC emacs-lisp
     (use-package hide-mode-line
       :straight t
       :commands hide-mode-line-mode
       :general
       (:keymaps 'ricky//toggle-prefix-map
                 "l" 'hide-mode-line-mode))
   #+END_SRC
** Posframe packages
*** Flycheck-posframe
   Dispaly flycheck errors in childframe(requires emacs 26).
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck-posframe
       :if (display-graphic-p)
       :straight t
       :after flycheck
       :ghook
       ('flycheck-mode-hook #'flycheck-posframe-mode))
   #+END_SRC
*** Helm-posframe
#+begin_src emacs-lisp
  (use-package helm-posframe
    :straight t
    :if (display-graphic-p)
    :after helm
    :init
    (setq helm-posframe-poshandler 'posframe-poshandler-frame-center)
    :config
    ;; (helm-posframe-enable)
    )
#+end_src
*** Which-key-posframe
    #+BEGIN_SRC emacs-lisp
      (use-package which-key-posframe
        :straight t
        :if (display-graphic-p)
        :config
        (which-key-posframe-mode))
    #+END_SRC
*** Company-posframe
    #+BEGIN_SRC emacs-lisp
      (use-package company-posframe
        :straight t
        :if (display-graphic-p)
        :diminish 'company-posframe-mode
        :general
        (
         :keymaps 'company-posframe-active-map
         [remap company-select-next-if-tooltip-visible-or-complete-selection] 'company-select-next)
        :ghook ('company-mode-hook 'company-posframe-mode))
    #+END_SRC
* Keybindings
** Window manipulation
*** Toggle maximize
    Copied from spacemacs https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Bdistributions/spacemacs-base/funcs.el
**** Elisp
     #+BEGIN_SRC emacs-lisp
     (defun toggle-maximize-buffer ()
     "Maximize buffer"
     (interactive)
     (if (and (= 1 (length (window-list)))
         (assoc ?_ register-alist))
         (jump-to-register ?_)
         (progn
         (window-configuration-to-register ?_)
         (delete-other-windows))))
     #+END_SRC
*** Config
    Use <SPC-W> as evil window prefix along with <C-w>
    #+BEGIN_SRC emacs-lisp
     (general-def
       :states '(normal motion insert emacs)
       :prefix "SPC W"
       :non-normal-prefix "M-SPC W"
       "" '(
            :keymap evil-window-map
            :package evil
            :which-key "window-prefix"))
     (general-def
       :keymaps 'evil-window-map
       "m" 'toggle-maximize-buffer)
    #+END_SRC
** Window manipulation hydra
*** Hydra
#+BEGIN_SRC emacs-lisp
  ;; (defhydra hydra-window (:color red
  ;;                         :hint nil)
  ;;   "
  ;;  Split: _v_ert _s_:horz
  ;; Delete: _o_nly  _D_ace  _d_window
  ;;   Move: _x_swap,_w_window-other
  ;;   Misc: _a_ce _m_aximise
  ;;   Open: _p_rojectile _b_helm-mini
  ;; "
  ;;   ("h" windmove-left)
  ;;   ("j" windmove-down)
  ;;   ("k" windmove-up)
  ;;   ("l" windmove-right)
  ;;   ("H" hydra-move-splitter-left);fix move splitters
  ;;   ("J" hydra-move-splitter-down)
  ;;   ("K" hydra-move-splitter-up)
  ;;   ("L" hydra-move-splitter-right)
  ;;   ("v" (lambda ()
  ;;          (interactive)
  ;;          (split-window-right)
  ;;          (windmove-right)))
  ;;   ("s" (lambda ()
  ;;          (interactive)
  ;;          (split-window-below)
  ;;          (windmove-down)))
  ;;   ("w" other-window :exit t)
  ;;   ("_" split-window-right)
  ;;   ("|" split-window-below)
  ;;   ("o" delete-other-windows :exit t)
  ;;   ("a" ace-window :exit t)
  ;;   ("x" ace-swap-window)
  ;;   ("D" ace-delete-window)
  ;;   ("d" delete-window)
  ;;   ("m" toggle-maximize-buffer :exit t)
  ;;   ("p" helm-projectile :exit t)
  ;;   ("b" helm-mini :exit t)
  ;;   ("q" nil))
#+END_SRC
*** Binding
#+BEGIN_SRC emacs-lisp
  (use-package hydra-examples
    :straight hydra
    :commands(hydra-move-splitter-left
              hydra-move-splitter-down
              hydra-move-splitter-up
              hydra-move-splitter-right)
    :config
    (defhydra hydra-window (:color red
                            :hint nil)
      "
     Split: _v_ert _s_:horz
    Delete: _o_nly  _D_ace  _d_window
      Move: _x_swap,_w_window-other
      Misc: _a_ce _m_aximise
      Open: _p_rojectile _b_helm-mini _f_find-files
    "
      ("h" windmove-left)
      ("j" windmove-down)
      ("k" windmove-up)
      ("l" windmove-right)
      ("H" hydra-move-splitter-left);fix move splitters
      ("J" hydra-move-splitter-down)
      ("K" hydra-move-splitter-up)
      ("L" hydra-move-splitter-right)
      ("v" (lambda ()
             (interactive)
             (split-window-right)
             (windmove-right)))
      ("s" (lambda ()
             (interactive)
             (split-window-below)
             (windmove-down)))
      ("w" other-window :exit t)
      ("_" split-window-right)
      ("|" split-window-below)
      ("o" delete-other-windows :exit t)
      ("a" ace-window :exit t)
      ("x" ace-swap-window)
      ("D" ace-delete-window)
      ("d" delete-window)
      ("m" toggle-maximize-buffer :exit t)
      ("p" helm-projectile :exit t)
      ("b" helm-mini :exit t)
      ("f" helm-find-files :exit t)
      ("q" nil))
    :general
    (:states '(normal motion insert emacs)
             :prefix "SPC w"
             :non-normal-prefix "M-SPC w"
             "" 'hydra-window/body))
#+END_SRC
** Buffer manipulation
   Personal Spacemacs like buffer manipulation shortcuts
   #+BEGIN_SRC emacs-lisp
       (general-def
         :states '(normal motion insert emacs)
         :prefix "SPC b"
         :non-normal-prefix "M-SPC b"
         :prefix-map 'ricky//buffer-prefix-map
         "" '(:ignore t :which-key "buffer-prefix")
         "b" 'helm-mini
         "q" 'kill-buffer-and-window
         "d" 'kill-this-buffer
         "k" 'kill-buffer
         "n" 'next-buffer
         "p" 'previous-buffer
         "c" '((lambda()
                 (interactive)
                 (switch-to-buffer nil)) :which-key "cycle-last-buffer")
         "s" '((lambda()
                 (interactive)
                 (switch-to-buffer "*scratch*")) :which-key "scratch-buffer")
         "f" 'format-all-buffer)
   #+END_SRC
** File manipulation
   File manipulation shortcuts
*** Copy file-name
    Copied from spacemacs
    https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Bdistributions/spacemacs-base/funcs.el
**** Elisp
     #+BEGIN_SRC emacs-lisp
   (defun show-and-copy-buffer-filename ()
     "Show and copy the full path to the current file in the minibuffer."
     (interactive)
     ;; list-buffers-directory is the variable set in dired buffers
     (let ((file-name (or (buffer-file-name) list-buffers-directory)))
       (if file-name (message (kill-new file-name))
         (error "Buffer not visiting a file"))))
     #+END_SRC
*** Config
    #+BEGIN_SRC emacs-lisp
    (general-def
      :states '(normal motion insert emacs)
      :prefix "SPC f"
      :non-normal-prefix "M-SPC f"
      :prefix-map 'ricky//file-prefix-map
      "" '(:ignore t :which-key "file-prefix")
      "l" 'helm-locate
      "e" 'sudo-edit
      "s" 'save-buffer
      "S" 'evil-write-all
      "c" 'copy-file
      "y" 'show-and-copy-buffer-filename
      "v" 'config-visit
      "r" 'config-reload
      "f" 'helm-find-files
      "b" 'eww-open-file)
    #+END_SRC
** Help shortcuts
   #+BEGIN_SRC emacs-lisp
   (general-def
         :states '(normal motion insert emacs)
         :prefix "SPC H"
         :non-normal-prefix "M-SPC H"
         "" '(:keymap help-map :package help :which-key "help-prefix"))
   #+END_SRC
** Feature toggle shortcuts
   #+BEGIN_SRC emacs-lisp
     (general-def
       :states '(normal motion insert emacs)
       :prefix "SPC T"
       :non-normal-prefix "M-SPC T"
       :prefix-map 'ricky//toggle-prefix-map
       "" '(:ignore t :which-key "toggle-prefix")
       "m" 'toggle-menu-bar-mode-from-frame
       "f" 'toggle-frame-fullscreen
       "s" 'toggle-scroll-bar
       "t" 'toggle-tool-bar-mode-from-frame
       "l" 'hide-mode-line-mode
       "w" 'whitespace-mode
       "c" 'load-theme)
   #+END_SRC
** Search shortcuts
   #+BEGIN_SRC emacs-lisp
  (general-def
    :states '(normal motion insert emacs)
    :prefix "SPC s"
    :non-normal-prefix "M-SPC s"
    :prefix-map 'ricky//search-prefix-map
    "" '(:ignore t :which-key "search-prefix"))
   #+END_SRC

* Project Management
** Projectile
   Project management for emacs
*** Config
    1. Make <SPC-p> projectile-prefix by binding it to the
       projectile-command-keymap
    2. Bind escape in projectile-mode-map to quit,to avoid getting stuck in
       mini-buffer.
    #+BEGIN_SRC emacs-lisp
      (use-package projectile
        :straight t
        :straight helm-rg
        :init
        (setq projectile-enable-caching t
              projectile-completion-system 'helm)
        :diminish projectile-mode
        :defer t
        :ghook
        ('prog-mode-hook #'projectile-mode)
        :general
        (:keymaps 'projectile-command-map
                  "<escape>" '(keyboard-quit :which-key "quit")
                  "ESC" nil)
        (:keymaps '(normal motion insert emacs)
                  :prefix "SPC p"
                  :non-normal-prefix "M-SPC p"
                  "" '(:keymap projectile-command-map :package projectile :which-key "projectile-prefix"))
        :config
        (setq projectile-project-root-files-top-down-recurring
              (append '("compile_commands.json"
                        ".ccls"
                        "Pipfile")
                      projectile-project-root-files-top-down-recurring))
        (setq projectile-globally-ignored-directories (append (list (expand-file-name "~/.local/share/virtualenvs") "/usr") projectile-globally-ignored-directories ))
        (projectile-mode 1))
    #+END_SRC
    3. helm-rg
    #+BEGIN_SRC emacs-lisp
      (use-package helm-rg
        :straight t
        :commands (helm-rg ricky//helm-rg-directory)
        :init
        (defun ricky//helm-projectile-rg-advice (old-fun &rest args)
          "improve helm projectile rg inside project deep directories"
          (let ((helm-rg--current-dir (projectile-project-root)))
            (apply old-fun args)))
        (defun ricky//helm-rg-directory ()
          "function for using helm rg in a directory"
          (interactive)
          (let* ((ricky//rg-start-directory-name (if (projectile-project-p)(projectile-project-root) default-directory ))
                 (helm-rg--current-dir (read-directory-name "rg-directory : " ricky//rg-start-directory-name)))
            (helm-rg "")))
        (general-add-advice 'helm-projectile-rg :around #'ricky//helm-projectile-rg-advice)
        :general
        (:keymaps 'ricky//search-prefix-map
                  "r" 'helm-rg
                  "d" 'ricky//helm-rg-directory        ))
    #+END_SRC
** Helm-projectile
   Helm interface for projectile
   #+BEGIN_SRC emacs-lisp
     (use-package helm-projectile
         :straight t
         :after (helm projectile)
         :config
         (helm-projectile-on))
   #+END_SRC
** Treemacs
   NerdTree like project explorer for emacs.
   #+BEGIN_SRC emacs-lisp
   (use-package treemacs
     :straight t
     :defer t
     :config
     (progn
       (setq treemacs-collapse-dirs (if (executable-find "python") 3 0))
       (treemacs-follow-mode t)
       (treemacs-filewatch-mode t)
       (pcase (cons (not (null (executable-find "git")))
                    (not (null (executable-find "python3"))))
         (`(t . t)
          (treemacs-git-mode 'deferred))
         (`(t . _)
          (treemacs-git-mode 'simple)))
       )
     :general
     (:states '(normal motion insert emacs)
      :prefix "SPC t"
      :non-normal-prefix "M-SPC t"
      :prefix-map 'ricky//treemacs-mode-map
      "" '(:ignore t :which-key "treemacs-prefix")
      "0" 'treemacs-select-window
      "1" 'treemacs-delete-other-windows
      "t" 'treemacs
      "b" 'treemacs-bookmark
      "f" 'treemacs-find-file
      "T" 'treemacs-find-tag)
     (:keymaps 'treemacs-mode-map
               "<escape>" 'keyboard-quit))
   #+END_SRC
*** Treemacs-evil
    #+BEGIN_SRC emacs-lisp
   (use-package treemacs-evil
     :after treemacs evil
     :straight t)

    #+END_SRC
*** Treemacs-projectile
    #+BEGIN_SRC emacs-lisp
      (use-package treemacs-projectile
        :straight t
        :general
        (:keymaps 'ricky//treemacs-mode-map
                  "p" 'treemacs-projectile))
    #+END_SRC
*** Treemacs-magit
    #+BEGIN_SRC emacs-lisp
  (use-package treemacs-magit
    :straight t
    :after treemacs magit)
    #+END_SRC
* Linting
** Flycheck
   Asynchronous linting
*** Config
    Make <SPC-e> the flycheck prefix by binding it to flycheck-command-map.
    #+BEGIN_SRC emacs-lisp
   (use-package flycheck
     :straight t
     :diminish flycheck-mode
     :general
     (
      :states '(normal motion insert emacs)
      :prefix "SPC e"
      :non-normal-prefix "M-SPC e"
      ""'(
          :keymap flycheck-command-map
          :package flycheck
          :which-key "flycheck-prefix"))
     :init
     (setq flycheck-navigation-minimum-level 'error)
     :ghook
     ('prog-mode-hook #'flycheck-mode)
     )
    #+END_SRC
* Completion
** Company
   Code completion package
*** Config
    1. Show numbers for completion selection using M-[0-9]
    2. Set 0 idle-delay for quick completion
    3. Function to group backends with company-yasnippet
    4. Map C-[0-9] for numbered completion
    5. <C-p> and <C-n> , <tab>and <s-tab> completion navigation
    #+BEGIN_SRC emacs-lisp
      (use-package company
        :straight t
        :defer 2
        :general
        (:keymaps 'company-active-map
         ;; "C-n" (lambda () (interactive) (company-select-next-if-tooltip-visible-or-complete-selection))
         "C-n" 'company-select-next-if-tooltip-visible-or-complete-selection
         "C-p" 'company-select-previous
         "C-SPC" 'company-complete-common
         "<tab>" 'company-select-next-if-tooltip-visible-or-complete-selection
         "<backtab>" 'company-select-previous )
        (:states '(normal motion insert emacs)
         :prefix "SPC a"
         :non-normal-prefix "M-SPC a"
         :prefix-map 'ricky//autocompletemap
         "" '(:ignore t :which-keey "autocomplete-prefix")
         "f" 'company-files
         "o" 'company-other-backend
         "y" 'company-yasnippet)
        :init
        (setq company-show-numbers t)
        (setq company-idle-delay 0)
        (setq company-selection-wrap-around t)
        ;; Add yasnippet support for all company backends
        ;; https://github.com/syl20bnr/spacemacs/pull/179
        (defvar company-mode/enable-yas t
          "Enable yasnippet for all backends.")
        (defun company-mode/backend-with-yas (backend)
          (if (or (not company-mode/enable-yas)
                  (and (listp backend) (member 'company-yasnippet backend)))
              backend
            (append (if (consp backend) backend (list backend))
                    '(:with company-yasnippet))))
        :config
        (global-company-mode 1)
        (dotimes (i 10)
          (general-def
            :keymaps 'company-active-map
            (format "C-%d" i) 'company-complete-number))
        (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends)))
    #+END_SRC
** Yasnippet
   Snippet engine for emacs
*** Config
    Rebind <CR> or <return> to complete snippet where it exists.
    Using general-def instead of :general since yas-maybe-expand is a variable
    which is defined only after autoload.
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
        :straight t
        :straight yasnippet-snippets
        :diminish 'yas-minor-mode
        :defer 2
        :config
        (yas-global-mode 1)
        (general-def
          :keymaps 'yas-minor-mode-map
          "<return>" yas-maybe-expand)
        )
    #+END_SRC
* Programming Helpers
** Smart-parens
   Package for bracket-pair matching
*** Config
    1. NewLine and Indent for C/C++ programming
       #+BEGIN_SRC emacs-lisp
       (use-package smartparens-config
         :straight smartparens
         :demand t
         :diminish smartparens-mode
         :init
         (setq sp-escape-quotes-after-insert nil)
         (defun my-create-newline-and-enter-sexp (&rest _ignored)
           "Open a new brace or bracket expression, with relevant newlines and indent. "
           (newline)
           (indent-according-to-mode)
           (forward-line -1)
           (indent-according-to-mode))
         :config
         (smartparens-global-mode 1)
         (show-smartparens-global-mode 1)
         (sp-local-pair 'c++-mode "{" nil
                        :post-handlers '((my-create-newline-and-enter-sexp "RET"))))
       #+END_SRC
** Rainbow-delimeters
   Rainbow delimeters
   #+BEGIN_SRC emacs-lisp
   (use-package rainbow-delimiters
     :straight t
     :ghook
     ('prog-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC
** Org-bullets
   UTF-8 bullets for org mode
*** Config
    Enable it on entering org-mode
    #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
           :straight t
           :ghook
           ('org-mode-hook #'org-bullets-mode))
    #+END_SRC
** Origami
   Code folding in emacs
   #+BEGIN_SRC emacs-lisp
   (use-package origami
     :straight t
     :ghook
     ('prog-mode-hook #'origami-mode))
   #+END_SRC

** Multi-compile
   multi-target interface to compile
*** Config
    Override multi-compile-run to run commands in interactive compile mode buffer.
    #+BEGIN_SRC emacs-lisp
      (use-package multi-compile
        :straight t
        :general
        (:states '(normal motion)
                 :prefix "SPC c"
                 "r" 'multi-compile-run
                 )
        :init
        (setq multi-compile-completion-system 'helm)
        (setq multi-compile-alist '(
                                    (c++-mode . (("c++-thread_run" . "g++ %file-name -pthread -std=c++17 -g -D LOCAL_SYS -o %file-sans && time ./%file-sans")
                                                 ("c++-run" . "g++ %file-name -std=c++17 -g -D LOCAL_SYS -o %file-sans && time ./%file-sans")))
                                    (rust-mode . (("build" . "cargo build")
                                                  ("run" . "cargo run")))
                                    (java-mode . (("java-maven-exec" "mvn exec:java -q -Dexec.mainClass=\"%cname\"" (multi-compile-locate-file-dir "pom.xml"))))
                                    (python-mode . (("python run" . "python %file-name < input.txt")
                                                    ("python to file" . "python %file-name < input.txt > output.txt") ))
                                    ))
        :config
        (add-to-list 'multi-compile-template
                     '("%cname" . (ricky//get-fully-qualified-class-name)))
        (defun multi-compile-run ()
          "Choice target and start compile."
          (interactive)
          (let* ((template (multi-compile--get-command-template))
                 (command (or (car-safe template) template))
                 (default-directory (if (listp template) (eval-expression (cadr template)) default-directory)))
            (compilation-start
             (multi-compile--fill-template command) t)))
        )
    #+END_SRC

** Format-all
   autoformat plugin emacs
   #+BEGIN_SRC emacs-lisp
   (use-package format-all
     :straight t
     :defer t)
   #+END_SRC
* Terminal
** Vterm
   VTE emulation in emacs
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :straight t
    :commands vterm
    :custom (vterm-install t)
    :config
    ;; (defun vterm-send-return ()
    ;;   "Sends C-m to the libvterm."
    ;;   (interactive)
    ;;   (process-send-string vterm--process "\C-m"))
    ;; (defun vterm-send-backtab()
    ;;   "Sends backtab to libvterm"
    ;;   (interactive)
    ;;   (when vterm--term
    ;;     (let ((inhibit-redisplay t)
    ;;           (inhibit-read-only t))
    ;;       (vterm--update vterm--term "<tab>" t nil nil))))
    ;; (define-key vterm-mode-map [return]  #'vterm-send-return)
    ;; (define-key vterm-mode-map [backtab]  #'vterm-send-backtab)
    (evil-set-initial-state 'vterm-mode 'insert)
    (evil-set-initial-state 'comint-mode 'normal)
    :general
    (:keymaps 'vterm-mode-map
              :states 'insert
              "C-e"      #'vterm--self-insert
              "C-f"      #'vterm--self-insert
              "C-a"      #'vterm--self-insert
              "C-v"      #'vterm--self-insert
              "C-b"      #'vterm--self-insert
              "C-w"      #'vterm--self-insert
              "C-u"      #'vterm--self-insert
              "C-d"      #'vterm--self-insert
              "C-n"      #'vterm--self-insert
              "C-m"      #'vterm--self-insert
              "C-p"      #'vterm--self-insert
              "C-j"      #'vterm--self-insert
              "C-k"      #'vterm--self-insert
              "C-r"      #'vterm--self-insert
              "C-t"      #'vterm--self-insert
              "C-g"      #'vterm--self-insert
              "C-c"      #'vterm--self-insert
              "C-SPC"    #'vterm--self-insert)
    (:states '(normal motion insert emacs)
             :prefix "SPC RET"
             :non-normal-prefix "M-SPC RET"
             "" 'vterm-other-window))
#+END_SRC
* Misc
** Sudo-edit
   Tramp wrapper to edit files as root
   #+BEGIN_SRC emacs-lisp
     (use-package sudo-edit
       :straight t
       :defer t)
   #+END_SRC
** Webpaste
   Online pastebin service integration
   #+BEGIN_SRC emacs-lisp
   (use-package webpaste
     :straight t
     :defer t)
   #+END_SRC
** Emacs Startup Profiler
   #+BEGIN_SRC emacs-lisp
  (use-package esup
    :straight t
    :commands esup)
   #+END_SRC
** So-long
   Handle infamous long lines issue in emacs
#+BEGIN_SRC emacs-lisp
    (use-package so-long
      :straight t
      :defer 10
      :config
      (setq so-long-minor-modes (append so-long-minor-modes '(line-number-mode company-mode company-box-mode company-flx-mode diff-auto-refine-mode display-time-mode display-battery-mode electric-indent-mode smartparens-mode tooltip-mode yas-minor-mode save-place-mode mouse-wheel-mode recentf-mode undo-tree-mode show-smartparens-mode)))
      (global-so-long-mode))
#+END_SRC
** Verb
    HTTP client
    #+BEGIN_SRC emacs-lisp
    (use-package verb
    :straight t
        :mode ("\\.verb\\'" . verb-mode))
    #+END_SRC
** Ranger
#+BEGIN_SRC emacs-lisp
  (use-package ranger
    :straight t
    :defer t)
#+END_SRC
* Git
** Magit
   Git interface for emacs on steroids
   #+BEGIN_SRC emacs-lisp
   (use-package magit
     :straight t
     :general
     ("C-x g" 'magit-status)
     (:states '(normal motion insert emacs)
                  :prefix "SPC g"
                  :non-normal-prefix "M-SPC g"
                  "" 'magit-status)
     :commands magit-status)
   #+END_SRC
** Evil-magit
   Evil interface to magit
   #+BEGIN_SRC emacs-lisp
   (use-package evil-magit
     :straight t
     :after magit
     :init
     (setq evil-magit-want-horizontal-movement t)
     :config
     (general-def
       :keymaps '(transient-map transient-edit-map transient-sticky-map)
       "<escape>" 'transient-quit-one)
     (general-unbind '(magit-mode-map magit-diff-mode-map) "SPC"))
   #+END_SRC
** Smerge mode hydra
#+BEGIN_SRC emacs-lisp
  (use-package smerge-mode
    :after hydra
    :defer t
    :config
    (defhydra smerge-hydra
      (:color pink :hint nil :post (smerge-auto-leave))
      "
  ^Move^       ^Keep^               ^Diff^                 ^Other^
  ^^-----------^^-------------------^^---------------------^^-------
  _n_ext       _b_ase               _<_: upper/base        _C_ombine
  _p_rev       _u_pper              _=_: upper/lower       _r_esolve
  ^^           _l_ower              _>_: base/lower        _k_ill current
  ^^           _a_ll                _R_efine
  ^^           _RET_: current       _E_diff
  "
      ("n" smerge-next)
      ("p" smerge-prev)
      ("b" smerge-keep-base)
      ("u" smerge-keep-upper)
      ("l" smerge-keep-lower)
      ("a" smerge-keep-all)
      ("RET" smerge-keep-current)
      ("\C-m" smerge-keep-current)
      ("<" smerge-diff-base-upper)
      ("=" smerge-diff-upper-lower)
      (">" smerge-diff-base-lower)
      ("R" smerge-refine)
      ("E" smerge-ediff)
      ("C" smerge-combine-with-next)
      ("r" smerge-resolve)
      ("k" smerge-kill-current)
      ("ZZ" (lambda ()
              (interactive)
              (save-buffer)
              (bury-buffer))
       "Save and bury buffer" :color blue)
      ("q" nil "cancel" :color blue))
    :hook (magit-diff-visit-file . (lambda ()
                                     (when smerge-mode
                                       (unpackaged/smerge-hydra/body)))))

#+END_SRC
* Language Tools
** LSP-Mode
   Language Server Client for Emacs
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :straight t
       :defer t
       :commands lsp
       :init
       (setq lsp-enable-file-watchers nil)
       (setq gc-cons-threshold 100000000)
       (setq read-process-output-max (* 4096 4096)) ;; 1mb
       (setq lsp-completion-provider :capf)
       (setq lsp-headerline-breadcrumb-enable t)
       :general
            (:states '(normal motion insert emacs)
                     :prefix "SPC l"
                     :non-normal-prefix "M-SPC l"
                     "" '(:keymap lsp-command-map )
                    ;; "d" 'lsp-find-definition
                    ;; "." 'lsp-execute-code-action
                     )
            (:keymaps 'lsp-command-map
                    "d" 'lsp-find-definition
                    "." 'lsp-execute-code-action
                     )
       :ghook
       ('lsp-mode-hook #'lsp-enable-which-key-integration)
     )
   #+END_SRC
** LSP-UI
   Higher level UI modules for LSP-mode
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-ui
       :straight t
       :defer t
       :commands lsp-ui-mode
       :general
       ;; (:keymaps 'lsp-ui-mode-map
       ;;            [remap xref-find-definitions] #'lsp-ui-peek-find-definitions
       ;;            [remap xref-find-references] #'lsp-ui-peek-find-references
       ;;            [remap evil-goto-definition] #'lsp-ui-peek-find-definitions)
       ;; (:states '(normal motion insert emacs)
       ;;           :keymaps 'lsp-ui-mode-map
       ;;           :prefix "SPC l"
       ;;           :non-normal-prefix "M-SPC l"
       ;;           "s" '(lsp-ui-imenu :which-key "lsp-imenu")
       ;;           )
       :init
       (setq lsp-ui-sideline-update-mode 'point
             lsp-ui-sideline-show-hover nil))
   #+END_SRC
** Lsp utils
*** Helm LSP
    #+BEGIN_SRC emacs-lisp
      (use-package helm-lsp
          :straight t
          :defer t
          :commands helm-lsp-workspace-symbol
          :general
          (:keymaps 'lsp-command-map
                  "w" '(helm-lsp-workspace-symbol :which-key "workspace-symbol")
                  )
          )
    #+END_SRC
*** LSP treemacs
#+BEGIN_SRC emacs-lisp
  (use-package lsp-treemacs
    :straight t
    :after (lsp-mode)
    :commands lsp-treemacs-errors-list
    :init
    (setq lsp-treemacs-error-list-severity 1)
    :general
    (:keymaps 'lsp-command-map
             "e" '(lsp-treemacs-errors-list :which-key "error-list"))
    :config
    (lsp-treemacs-sync-mode 1)
    )
#+END_SRC

** DAP-Mode
   #+BEGIN_SRC emacs-lisp
     (use-package dap-mode
       :straight t
       :after lsp-mode
       :defer t
       :commands (dap-mode dap-debug)
       :ghook
       ('dap-stopped-hook (lambda (arg) (call-interactively #'dap-hydra)))
       :config
       (dap-auto-configure-mode 1)
       )
   #+END_SRC
** DAP-utils
    #+BEGIN_SRC emacs-lisp
      (use-package dap-ui
        :straight dap-mode
        :ghook
        ('dap-mode-hook 'dap-ui-mode)
        ('dap-mode-hook 'tooltip-mode)
        ('dap-mode-hook 'dap-ui-controls-mode)
        :custom-face
        (dap-ui-pending-breakpoint-face ((t :inherit breakpoint-enabled)))
        (dap-ui-verified-breakpoint-face ((t :inherit breakpoint-enabled))))
    #+END_SRC
** C-family
*** LSP 
    #+BEGIN_SRC  emacs-lisp
      (use-package clients/lsp-clangd
        :straight lsp-mode
        :init
        (setq lsp-clients-clangd-args '("--background-index" "-header-insertion=never"))
        :ghook
        ('(c-mode-hook c++-mode-hook objc-mode-hook) 'lsp)
        )
    #+END_SRC
*** DAP-GDB/LLDB
    #+BEGIN_SRC emacs-lisp
      (use-package dap-cpptools
        :straight dap-mode
        :config
        (dap-cpptools-setup))
      ;; :init
      ;; (setq dap-gdb-lldb-path "~/dap-servers/webfreak.debug-0.22.0/"))
    #+END_SRC

** Java
*** Lsp-java
    Eclipse JDT-LS client for emacs
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-java
        :straight t
        :defer t
        :ghook
        ('java-mode-hook 'lsp)
        :init
          (setq lsp-java-favorite-static-members '( "java.util.stream.Collectors.*" "org.junit.Assert.*" "org.junit.Assume.*" "org.junit.jupiter.api.Assertions.*" "org.junit.jupiter.api.Assumptions.*" "org.junit.jupiter.api.DynamicContainer.*" "org.junit.jupiter.api.DynamicTest.*")
                lsp-java-maven-download-sources t
                lsp-java-content-provider-preferred "fernflower"
                )
          )
    #+END_SRC
*** DAP-Java
    #+BEGIN_SRC emacs-lisp
      (use-package dap-java
        :straight dap-mode
        :after (lsp-java dap-mode))
    #+END_SRC
** Python
*** Pipenv
    #+BEGIN_SRC emacs-lisp
      (use-package pipenv
        :straight t
        :ghook
        ('python-mode-hook #'pipenv-mode))
    #+END_SRC
*** Poetry
    #+begin_src emacs-lisp
      ;; (use-package poetry
      ;;    :straight t
      ;;    :defer t
      ;;    :ghook
      ;;    ('python-mode-hoook #'poetry-tracking-mode))
    #+end_src
*** Lsp-pyright
#+BEGIN_SRC  emacs-lisp
  (use-package lsp-pyright
    :straight t
    :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp))))  ; or lsp-deferred
#+END_SRC

*** DAP-python
    #+BEGIN_SRC emacs-lisp
      (use-package dap-python
      :straight dap-mode
      :after (lsp-pyright dap-mode))
    #+END_SRC

** Rust
   #+BEGIN_SRC emacs-lisp
     (use-package rust-mode
       :straight t
       :mode ("\\.rs\\'" . rust-mode)
       :ghook
       ('rust-mode-hook 'lsp))
   #+END_SRC
** Javascript
*** Typescript-mode
    #+BEGIN_SRC emacs-lisp
      (use-package typescript-mode
        :straight t
        :mode ("\\.ts\\'" . typescript-mode)
        :ghook
        ('(javascript-mode-hook typescript-mode-hook) 'lsp)
        :defer t)
    #+END_SRC
** Json
*** Json mode
   #+begin_src emacs-lisp
     (use-package json-mode
       :straight t
       :mode ("\\.json\\'" . json-mode)
       :ghook
       ('json-mode-hook 'lsp)
       )
   #+end_src
*** Json navigator
    #+BEGIN_SRC emacs-lisp
      (use-package json-navigator
        :straight t
        :straight tree-mode
        :defer t)
    #+END_SRC
    
** Lua 
*** Lua mode
   #+begin_src emacs-lisp 
     (use-package lua-mode
       :straight t 
       :mode ("\\.lua\\'" . lua-mode)
       :interpreter "lua"
       :gfhook 
       'lsp)
   #+end_src
** Golang 
*** Go mode
   #+begin_src emacs-lisp 
     (use-package go-mode
       :straight t 
       :mode "\\.go\\'"
       :gfhook 
       'lsp)
   #+end_src
